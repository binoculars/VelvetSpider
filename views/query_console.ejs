<!DOCTYPE html>
<html>
	<head>
		<title><%= title %></title>

        <!-- 1. Load platform.js for polyfill support. -->
        <script src="/bower_components/platform/platform.js"></script>

        <script src="/bower_components/x2js/xml2json.min.js"></script>
        <script src="/bower_components/vkbeautify-wrapper/dist/vkbeautify.0.99.00.beta.js"></script>

		<!-- 2. Use an HTML Import to bring in the element. -->
		<link rel="import" href="/bower_components/polymer/polymer.html">

		<link rel="import" href="/bower_components/core-ajax/core-ajax.html">
		<link rel="import" href="/bower_components/core-scaffold/core-scaffold.html">
		<link rel="import" href="/bower_components/core-header-panel/core-header-panel.html">
		<link rel="import" href="/bower_components/core-menu/core-menu.html">
		<link rel="import" href="/bower_components/core-icon/core-icon.html">
		<link rel="import" href="/bower_components/core-icons/core-icons.html">
		<link rel="import" href="/bower_components/core-icons/social-icons.html">
		<link rel="import" href="/bower_components/core-item/core-item.html">
		<link rel="import" href="/bower_components/core-selector/core-selector.html">
		<link rel="import" href="/bower_components/core-icon-button/core-icon-button.html">
		<link rel="import" href="/bower_components/core-toolbar/core-toolbar.html">
		<link rel="import" href="/bower_components/core-drawer-panel/core-drawer-panel.html">
        <link rel="import" href="/bower_components/core-splitter/core-splitter.html">

		<link rel="import" href="/bower_components/paper-item/paper-item.html">
		<link rel="import" href="/bower_components/paper-input/paper-input.html">
		<link rel="import" href="/bower_components/paper-button/paper-button.html">
        <link rel="import" href="/bower_components/paper-checkbox/paper-checkbox.html">
        <link rel="import" href="/bower_components/paper-tabs/paper-tabs.html">

        <link rel="import" href="/bower_components/prettify-element/prettify-element.html">

        <link href="//fonts.googleapis.com/css?family=Varela+Round|Playball" rel="stylesheet" type="text/css">
        <link href="/stylesheets/style.css" rel="stylesheet" type="text/css">

        <style shim-shadowdom>
            body {
                font-family: 'Varela Round', sans-serif;
            }

            a {
                color: #7D25AC;
            }

			body > polymer-ui-menu {
				width: 300px;
			}

			#services {
			}

			.hidden {
				display: none;
			}

            paper-checkbox::shadow #ink{
                color: inherit;
            }

            paper-checkbox::shadow #checkbox.checked {
                border-color: #7D25AC;
            }

            paper-tabs {
                background-color: #7D25AC;
                color: white;
                box-shadow: 0px 3px 2px rgba(0, 0, 0, 0.2);
            }

            paper-tabs::shadow #selectionBar {
                background-color: white;
            }

            paper-tabs paper-tab::shadow #ink {
                color: inherit;
            }

            #resp::shadow pre {
                overflow-x: scroll;
            }
		</style>
	</head>
	<body fullbleed>
        <core-ajax auto
                   url="/user"
                   params=""
                   handleAs="json"
                   class="user">
        </core-ajax>
		<core-ajax auto
                   url="/api/listServices"
		           params=""
		           handleAs="json"
				   class="services">
        </core-ajax>

		<core-scaffold id="core_scaffold">
			<core-header-panel mode="seamed" id="core_header_panel" navigation flex>
                <core-toolbar style="background-color: #fff; color: #7D25AC;">
                    <!--<img src="/images/spider.png" style="max-height: 64px; max-width: 64px;">--> 
                    <span class="logo" style="font-size: 48px; text-align: center; width: 100%;">VelvetSpider</span>
                </core-toolbar>
				<core-menu class="services">
<<<<<<< HEAD
					<template repeat="{{}}">
                        <style shim-shadowdom>
                            .services paper-item::shadow core-icon {
                                fill: #7D25AC;
                                stroke: #000;
                                stroke-width: 0.2;
                                height: 40px;
                                width: 40px;
                            }

                            .services paper-item.core-selected::shadow  #label {
                                text-decoration: underline;
                                text-decoration-color: #000000;
                            }

                            .services paper-item::shadow #label {
                                color: #7D25AC;
                            }
                        </style>
						<paper-item icon="[[icon]]" label="[[name]]" id="[[id]]" disabled?="{{disabled}}"></paper-item>
=======
                    <style shim-shadowdom>
                        .services paper-item::shadow core-icon {
                            fill: #7D25AC;
                            stroke: #000;
                            stroke-width: 0.2;
                            height: 40px;
                            width: 40px;
                        }

                        .services paper-item.core-selected::shadow  #label {
                            text-decoration: underline;
                            text-decoration-color: #000000;
                        }

                        .services paper-item::shadow #label {
                            color: #7D25AC;
                        }
                    </style>
					<template repeat="{{response}}">
						<paper-item icon="[[icon]]" label="[[name]]" id="[[id]]"></paper-item>
>>>>>>> develop
						<core-ajax auto
                                   url="/javascripts/services/[[schema]]"
						           params=""
						           handleAs="json"
						           class="[[id]]">
                        </core-ajax>
						<script>
                            [].map.call(document.querySelectorAll('core-menu.services core-ajax'), function(el) {
                                el.addEventListener("core-response", function (e) {
                                    APIs[e.target.attributes['class'].value] = e.detail.response['endpoints'];
                                });
                            });
						</script>
					</template>
					<script>
						document.querySelector('core-menu.services').addEventListener("click", function(e) {
							var API = APIs[e.target.id];

							if (API) {
								document.querySelector('.endpoints template').model = {
									methods: Object.keys(API).sort()
								};
							} else {
								console.log('JSON Schema not found!')
							}

                            document.querySelector('#div').innerText = e.target.label;
							document.querySelector('core-selector').selected = null;
							document.querySelector('#method').clear();
							document.querySelector('#method').bindingDelegate = new PolymerExpressions();
						});
					</script>
				</core-menu>
			</core-header-panel>

            <style shim-shadowdom>
                #table > div {
                    padding: 5px;
                    overflow-y: scroll !important;
                }
                #core_scaffold::shadow core-toolbar {
                    background-color: #7D25AC;
                }
            </style>
			<div id="div" tool></div>

            <div id="table" class="container" horizontal layout fit>
                <div>
                    <style>
                        .endpoints > * {
                            color: black;
                            padding-left: 5px;
                            padding-right: 5px;
                            padding-top: 10px;
                            padding-bottom: 10px;
                            white-space: nowrap;
                            overflow-wrap: normal;
                            overflow: hidden;
                            height: inherit;
                        }
                        .endpoints > *.core-selected {
                            color: #ffffff;
                            background-color: #7D25AC;
                        }
                    </style>
                    <core-selector class="endpoints">
                        <template repeat="{{method in methods}}">
                            <paper-item label="[[method]]"></paper-item>
                        </template>
                    </core-selector>
                </div>
                <core-splitter direction="left" minSize="200px"></core-splitter>
                <div flex style="overflow-y: scroll !important;">
                    <template id="method" bind>
                        <h1>[[method]] <a href="[[docURL]]">[[name]]</a></h1>
                        <h3>Description:</h3>
                        <template repeat="[[description]]">
                            <p>[[]]</p>
                        </template>

                        <h3>Query:</h3>
                        <div>
                            [[method]] {{resourceURL}}{{fieldSelectorsURLString}}?<template repeat="{{param in parameters}}"><template if="{{param.val}}">{{param.name}}={{param.val | urlEncode}}&amp;</template></template>
                        </div>

                        <template if="{{urlVariables.length > 0}}">
                            <h3>URL Path Variables:</h3>
                            <div vertical layout>
                                <template id="urlVars" repeat="{{var in urlVariables}}">
                                    <div horizontal layout style="padding: 3px;">
                                        <div flex>[[var.name]]:</div>
                                        <div flex two>
                                            <paper-input name="[[var.name]]"
                                                         replaces="[[var.replaces]]"
                                                         class="urlVariable"
                                                         floatinglabel="[[ var.exampleValues != null ]]"
                                                         label="[[ var.exampleValues ? 'E.g. ' + var.exampleValues : '']]"
                                                         inputValue="{{var.val}}"
                                                         required="true"
                                                         pattern="[[var.data.regex || '.*']]">
                                            </paper-input>
                                        </div>
                                        <div flex two>Description: [[var.description]]</div>
                                    </div>
                                </template>
                                <script>
                                    var urlVarInputs = document.querySelectorAll('paper-input.urlVariable');
                                    var methodModel = document.querySelector('#method').model;

                                    [].map.call(urlVarInputs, function(el) {
                                        el.addEventListener('input', function () {
                                            methodModel.resourceURL = methodModel.resourceURL_orig;

                                            [].map.call(urlVarInputs, function(input) {
                                                if (!input.invalid) {
                                                    methodModel.resourceURL = methodModel.resourceURL.replace(input.attributes['replaces'].value, encodeURIComponent(input.inputValue));
                                                }
                                            });
                                        });
                                    });
                                </script>
                            </div>
                        </template>

                        <template if="{{fieldSelectors.length > 0}}">
                            <h3>Field Selectors:</h3>
                            <div vertical layout>
                                <div horizontal layout style="padding: 3px; font-weight: bold;">
                                    <div flex>Field</div>
                                    <div flex></div>
                                    <div flex>Description</div>
                                    <div flex>Notes</div>
                                </div>
                                <template repeat="{{fieldSelectors}}">
                                    <div horizontal layout style="padding: 3px;">
                                        <div flex>[[field]]</div>
                                        <div flex><paper-checkbox class="fieldSelector" name="[[field]]"></paper-checkbox></div>
                                        <div flex>[[description]]</div>
                                        <div flex>[[notes]]</div>
                                    </div>
                                </template>
                            </div>
                            <script>
                                var fieldSelectorCheckboxes = document.querySelectorAll('paper-checkbox.fieldSelector');
                                var methodModel = document.querySelector('#method').model;

                                [].map.call(fieldSelectorCheckboxes, function(el) {
                                    el.addEventListener('change', function () {
                                        var fsString = "";

                                        [].forEach.call(fieldSelectorCheckboxes, function(input) {
                                            if (input.checked) {
                                                fsString += "," + input.attributes['name'].value;
                                            }
                                        });

                                        methodModel.fieldSelectorsURLString = (fsString.length) ? ":(" + fsString.replace(/^,/, '') + ")" : "";
                                    });
                                });
                            </script>
                        </template>

                        <template if="{{parameters.length > 0}}" id="parameters">
                            <h3>Parameters:</h3>
                            <div vertical layout>
                                <template repeat="{{parameters}}">
                                    <div horizontal layout style="padding: 3px;">
                                        <div flex>[[name]]:</div>
                                        <div flex two>
                                            <paper-input name="[[name]]"
                                                         class="parameter"
                                                         floatinglabel="[[ exampleValues != null ]]"
                                                         label="[[ exampleValues ? 'E.g. ' + exampleValues : '']]"
                                                         inputValue="{{val}}"
                                                         required="[[!optional]]">
                                            </paper-input>
                                        </div>
                                        <div flex two>Description: [[description]]</div>
                                    </div>
                                </template>
                            </div>
                        </template>

                        <div horizontal end-justified layout>
                            <div>
                                <paper-button id="submit" raised class="inverted">Submit</paper-button>
                                <script>
                                    var paramInputs = document.querySelectorAll('paper-input.parameter');
                                    var methodModel = document.querySelector('#method').model;

                                    document.querySelector('#submit').addEventListener('tap', function(e) {
                                        var requestParams = {};
                                        var valid = true;

                                        [].map.call(paramInputs, function(input) {
                                            if (!input.invalid) {
                                                if (input.inputValue) {
                                                    requestParams[input.attributes['name'].value] = input.inputValue;
                                                }
                                            } else {
                                                valid = false;
                                            }
                                        });

                                        if (valid) {
                                            var apiReq = document.querySelector('#APIRequest');

                                            apiReq.params = {
                                                "url": methodModel.resourceURL + (methodModel.fieldSelectorsURLString ? methodModel.fieldSelectorsURLString : ""),
                                                "req": JSON.stringify(requestParams)
                                            };

                                            apiReq.go();
                                        } else {
                                            console.log('bad params');
                                        }
                                    });
                                </script>
                            </div>
                        </div>

                        <div>
                            <h1>Response</h1>

                            <paper-tabs id="responseFormat" selected="0">
                                <paper-tab>JSON</paper-tab>
                                <paper-tab>XML</paper-tab>
                            </paper-tabs>

                            <prettify-element id="resp" style="tab-size: 2;"></prettify-element>

                            <core-ajax id="APIRequest"
                                       method="GET"
                                       handleAs="json">
                            </core-ajax>

                            <script>
                                document.querySelector('#APIRequest').setAttribute('url', '/api/service/' + document.querySelector('core-menu.services .core-selected').id);

                                var respText = {
                                    json: "",
                                    xml: ""
                                };

                                var x2js = new X2JS();

                                document.querySelector('#APIRequest').addEventListener('core-response', function(e) {
                                    console.log(e.detail.response);

                                    respText.json = JSON.stringify(e.detail.response, null, '\t');
                                    respText.xml = vkbeautify.xml(x2js.json2xml_str(e.detail.response), '\t');
                                    document.querySelector('#responseFormat').selected = 0;
                                    document.querySelector('#responseFormat').dispatchEvent(new Event('core-select'));
                                });

                                document.querySelector('#responseFormat').addEventListener('core-select', function(e) {
                                    var text;

                                    if (e.target.selected == 0)
                                        text = respText.json;
                                    else if (e.target.selected == 1)
                                        text = respText.xml;

                                    document.querySelector('#resp').setAttribute('text', text);
                                });
                            </script>
                        </div>
                    </template>
                </div>
            </div>
		</core-scaffold>

		<script>
			var APIs = [];

			document.addEventListener('polymer-ready', function() {
                CoreStyle.g.paperInput.focusedColor = '#7D25AC';
                CoreStyle.g.paperInput.invalidColor = '#AC2598';

                var servicesTemplate = document.querySelector('core-menu.services template');
                servicesTemplate.bindingDelegate = new PolymerExpressions();

                var user = {};

                document.querySelector("core-ajax.user").addEventListener("core-response",
                    function(e) {
                        user = e.detail.response;

                        document.querySelector("core-ajax.services").addEventListener("core-response",
                            function(e) {
                                var services = [];

                                e.detail.response.forEach(function(el) {
                                    el.disabled = true;

                                    if (user[el.id]) {
                                        if (user[el.id].token) {
                                            el.disabled = false;
                                            services.push(el)
                                        }
                                    }
                                });

                                servicesTemplate.model = e.detail.response; // services; TODO: only display things that have a user token

                                console.log(user, servicesTemplate.model);
                            }
                        );
                    }
                );

				document.querySelector('core-selector').addEventListener('core-select', function (event) {
					if (event.detail.isSelected) {
						var service = document.querySelector('core-menu.services .core-selected').id;
						var methodTemplate = document.querySelector('#method');

						methodTemplate.model = APIs[service][event.detail.item.label];
						methodTemplate.model.resourceURL_orig = methodTemplate.model.resourceURL;
					}
				});

				document.querySelector('.endpoints template').bindingDelegate = new PolymerExpressions();
			});

            PolymerExpressions.prototype.urlEncode = function(str) {
                return encodeURIComponent(str);
            };

			PolymerExpressions.prototype.paramString = function(parameters) {
				console.log('test');
				var str = '';
				var validCount = 0;

				for (var j = 0; j < parameters.length; j++) {
					//if (parameters[j].val) {
						str += (validCount++ > 0 ? '&' : '') + parameters[j].name + '=' + parameters[j].val;
					//}
				}

				return str;
			};

		</script>
	</body>
</html>
